{"version":3,"sources":["components/Header.jsx","components/Content.jsx","components/ByCountry.jsx","App.js","serviceWorker.js","index.js"],"names":["style","flexGrow","Header","props","state","total_case","axios","get","headers","then","response","console","log","data","setState","this","AppBar","color","position","Toolbar","variant","Spinner","animation","Button","Alert","Container","className","Row","Col","xs","total_cases","order","total_deaths","total_recovered","new_cases","new_deaths","FormControl","Select","multiple","displayEmpty","input","Input","renderValue","selected","Component","Content","error","isLoaded","affected_countries","fetch","mode","json","countries_stat","catch","message","Table","striped","bordered","hover","size","map","country","key","country_name","cases","deaths","serious_critical","ByCountry","TextField","id","label","margin","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e082fd8c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Grid } from \"@material-ui/core\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Select from \"@material-ui/core/Select\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"@material-ui/core/Button\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport TypoGraphy from \"@material-ui/core/Typography\";\n\nconst style = {\n  flexGrow: 3\n};\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      total_case: \"\"\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\n        \"https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\",\n        {\n          headers: {\n            \"x-rapidapi-key\":\n              \"9b872049f1mshb6530d8e4522f3bp160365jsn788fb9734047\"\n          }\n        }\n      )\n      .then(response => {\n        console.log(response.data);\n        this.setState({\n          total_case: response.data\n        });\n      });\n  }\n\n  render() {\n    const { total_case } = this.state;\n    return (\n      <div>\n        <div>\n          <AppBar color=\"primary\" position=\"static\">\n            <Toolbar>\n              <TypoGraphy variant=\"title\" color=\"inherit\">\n                <Spinner animation=\"border\" variant=\"primary\" />\n              </TypoGraphy>\n\n              <TypoGraphy variant=\"h6\" style={style} color=\"inherit\">\n                <Button color=\"secondary\">\n                  <h2>Coronavirus info!</h2>\n                </Button>\n              </TypoGraphy>\n            </Toolbar>\n          </AppBar>\n        </div>\n\n        <Alert variant=\"info\">\n          <Container>\n            <h2 className=\"danger\">Coronavirus Summary:</h2>\n            <Row>\n              <Col xs>Total Cases : {total_case.total_cases}</Col>\n              <Col xs={{ order: 12 }}>\n                Total Deaths : {total_case.total_deaths}\n              </Col>\n              <Col xs={{ order: 1 }}>\n                Total Recovered : {total_case.total_recovered}\n              </Col>\n              <Col xs>New Cases : {total_case.new_cases}</Col>\n              <Col xs={{ order: 12 }}>New Deaths : {total_case.new_deaths}</Col>\n            </Row>\n          </Container>\n        </Alert>\n\n        <div>\n          <FormControl>\n            <Select\n              multiple\n              displayEmpty\n              input={<Input />}\n              renderValue={selected => {\n                return <em>Placeholder</em>;\n              }}\n            ></Select>\n          </FormControl>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Table from \"react-bootstrap/Table\";\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      affected_countries: []\n    };\n  }\n  componentDidMount() {\n    fetch(\n      \"https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php\",\n      {\n        mode: \"cors\",\n        headers: {\n          \"x-rapidapi-key\": \"9b872049f1mshb6530d8e4522f3bp160365jsn788fb9734047\"\n        }\n      }\n    )\n      .then(response => response.json())\n      .then(response => {\n        console.log(response.countries_stat);\n        this.setState({\n          isLoaded: true,\n          affected_countries: response.countries_stat\n        });\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({ isLoaded: true, error });\n      });\n  }\n\n  render() {\n    const { error, isLoaded, affected_countries } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return (\n        <div>\n          <Spinner animation=\"border\" variant=\"info\" />\n        </div>\n      );\n    } else {\n      return (\n        <Table striped bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th>Country Name</th>\n              <th>Total Cases</th>\n              <th>Death</th>\n              <th>Total Recovered</th>\n              <td>New Deaths</td>\n              <td>New Cases</td>\n              <td>Serious Critical</td>\n              <td>Active Cases</td>\n            </tr>\n          </thead>\n          <tbody>\n            {affected_countries.map(country => (\n              <tr key={country.country_name}>\n                <td>{country.country_name}</td>\n                <td> {country.cases}</td>\n                <td> {country.deaths}</td>\n                <td>{country.total_recovered}</td>\n                <td>{country.new_deaths}</td>\n                <td> {country.new_cases}</td>\n                <td> {country.serious_critical}</td>\n                <td> {country.serious_critical}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      );\n    }\n  }\n}\n\nexport default Content;\n","import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nclass ByCountry extends Component {\n  render() {\n    return (\n      <div>\n        <h3> Statistics By Country</h3>\n        <div>\n          <div>\n            <TextField\n              id=\"standard-full-width\"\n              label=\"Country Name\"\n              style={{ margin: 8 }}\n              placeholder=\"Country Name\"\n              margin=\"normal\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ByCountry;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport ByCountry from \"./components/ByCountry\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ByCountry />\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}